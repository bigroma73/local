diff -Naur 3/data/setup.xml 4/data/setup.xml
--- 3/data/setup.xml	2011-10-16 23:33:41.000000000 +0300
+++ 4/data/setup.xml	2011-10-16 23:33:41.000000000 +0300
@@ -36,6 +36,8 @@
 			<item level="1" text="12V output" requires="12V_Output">config.usage.output_12V</item>
 			<item level="0" text="Show event-progress in channel selection">config.usage.show_event_progress_in_servicelist</item>
 			<item level="0" text="Show channel numbers in channel selection">config.usage.show_channel_numbers_in_servicelist</item>
+			<item level="0" text="Show Event Percentage in channel selection">config.usage.show_percentage_progress_in_servicelist</item>
+			<item level="0" text="Alignment Event in channel selection">config.usage.aligment_event_in_servicelist</item>
 			<item level="2" text="Show infobar on channel change">config.usage.show_infobar_on_zap</item>
 			<item level="2" text="Show infobar on skip forward/backward">config.usage.show_infobar_on_skip</item>
 			<item level="2" text="Show infobar on event change">config.usage.show_infobar_on_event_change</item>
@@ -82,7 +84,7 @@
 			<item level="1" text="Subtitle language selection 2">config.autolanguage.subtitle_autoselect2</item>
 			<item level="1" text="Subtitle language selection 3">config.autolanguage.subtitle_autoselect3</item>
 			<item level="1" text="Subtitle language selection 4">config.autolanguage.subtitle_autoselect4</item>
-			<item level="1" text="Allow Subtitle equals Audio mask">config.autolanguage.equal_languages</item>
+			<item level="1" text="Allow Subtiles equals Audio mask">config.autolanguage.equal_languages</item>
 			<item level="1" text="Allow hearing impaired subtitles">config.autolanguage.subtitle_hearingimpaired</item>
 			<item level="1" text="Prefer hearing impaired subtitles">config.autolanguage.subtitle_defaultimpaired</item>
 			<item level="1" text="Prefer DVB-grafical subtitles">config.autolanguage.subtitle_defaultdvb</item>
diff -Naur 3/lib/python/Components/ServiceList.py 4/lib/python/Components/ServiceList.py
--- 3/lib/python/Components/ServiceList.py	2011-10-16 23:33:41.000000000 +0300
+++ 4/lib/python/Components/ServiceList.py	2011-10-17 16:05:50.000000000 +0300
@@ -44,8 +44,13 @@
 		self.root = None
 		self.mode = self.MODE_NORMAL
 		self.ItemHeight = 28
+		self.ShiftAligment = 210
+		self.PercentageWidth = 45
 		self.ServiceNameFont = parseFont("Regular;22", ((1,1),(1,1)))
 		self.ServiceInfoFont = parseFont("Regular;18", ((1,1),(1,1)))
+		self.EventPercentageFont = None
+		self.isEventColorSet = True
+		#parseFont("Regular;18", ((1,1),(1,1)))
 		self.ServiceNumberFont = parseFont("Regular;20", ((1,1),(1,1)))
 		self.onSelectionChanged = [ ]
 
@@ -66,12 +71,28 @@
 					self.l.setColor(eListboxServiceContent.serviceNotAvail, parseColor(value))
 				elif attrib == "foregroundColorEvent" or attrib == "colorServiceDescription":
 					self.l.setColor(eListboxServiceContent.eventForeground, parseColor(value))
+					if self.isEventColorSet:
+						self.l.setColor(eListboxServiceContent.eventPercentageColor, parseColor(value))
 				elif attrib == "foregroundColorEventSelected" or attrib == "colorServiceDescriptionSelected":
 					self.l.setColor(eListboxServiceContent.eventForegroundSelected, parseColor(value))
+					if self.isEventColorSet:
+						self.l.setColor(eListboxServiceContent.eventPercentageColorSelected, parseColor(value))
 				elif attrib == "foregroundColorEventborder":
 					self.l.setColor(eListboxServiceContent.eventborderForeground, parseColor(value))
 				elif attrib == "foregroundColorEventborderSelected":
 					self.l.setColor(eListboxServiceContent.eventborderForegroundSelected, parseColor(value))
+				elif attrib == "colorEventPercentage":
+					self.isEventColorSet = False
+					self.l.setColor(eListboxServiceContent.eventPercentageColor, parseColor(value))
+				elif attrib == "colorEventPercentageSelected":
+					self.isEventColorSet = False
+					self.l.setColor(eListboxServiceContent.eventPercentageColorSelected, parseColor(value))
+				elif attrib == "eventShiftAligment":
+					self.ShiftAligment = int(value)
+				elif attrib == "eventPercentageWidth":
+					self.PercentageWidth = int(value)
+				elif attrib == "eventPercentageFont":
+					self.EventPercentageFont = parseFont(value, ((1,1),(1,1)))
 				elif attrib == "colorEventProgressbar":
 					self.l.setColor(eListboxServiceContent.serviceEventProgressbarColor, parseColor(value))
 				elif attrib == "colorEventProgressbarSelected":
@@ -90,13 +111,23 @@
 					self.ServiceNameFont = parseFont(value, ((1,1),(1,1)))
 				elif attrib == "serviceInfoFont":
 					self.ServiceInfoFont = parseFont(value, ((1,1),(1,1)))
+					if self.EventPercentageFont == None:
+						self.EventPercentageFont = parseFont(value, ((1,1),(1,1)))
 				elif attrib == "serviceNumberFont":
 					self.ServiceNumberFont = parseFont(value, ((1,1),(1,1)))
 				else:
 					attribs.append((attrib, value))
+		if self.EventPercentageFont == None:
+			self.EventPercentageFont = parseFont("Regular;18", ((1,1),(1,1)))
 		self.skinAttributes = attribs
 		return GUIComponent.applySkin(self, desktop, parent)
 
+	def setPercentageWidth(self, width):
+		self.l.setPercentageWidth(width)
+
+	def setShiftAligment(self, offset):
+		self.l.setShiftAligment(offset)
+
 	def connectSelChanged(self, fnc):
 		if not fnc in self.onSelectionChanged:
 			self.onSelectionChanged.append(fnc)
@@ -236,21 +267,33 @@
 	def setMode(self, mode):
 		self.mode = mode
 		self.l.setItemHeight(self.ItemHeight)
-		self.l.setVisualMode(eListboxServiceContent.visModeComplex)
-		if mode == self.MODE_NORMAL or not config.usage.show_channel_numbers_in_servicelist.value:
-			channelNumberWidth = 0
-			channelNumberSpace = 0
+		if config.usage.show_percentage_progress_in_servicelist.value:
+			self.l.setPercentageWidth(self.PercentageWidth)
 		else:
-			channelNumberWidth = 50
-			channelNumberSpace = 10
-
-		if config.usage.show_event_progress_in_servicelist.value:
-			self.l.setElementPosition(self.l.celServiceEventProgressbar, eRect(channelNumberWidth+channelNumberSpace, 0, 52, self.ItemHeight))
+			self.l.setPercentageWidth(0)
+		if config.usage.aligment_event_in_servicelist.value:
+			self.l.setShiftAligment(self.ShiftAligment)
+		else:
+			self.l.setShiftAligment(0)
+		self.l.setVisualMode(eListboxServiceContent.visModeComplex)
+		if mode == self.MODE_NORMAL:
+			if config.usage.show_event_progress_in_servicelist.value:
+				self.l.setElementPosition(self.l.celServiceEventProgressbar, eRect(0, 0, 52, self.ItemHeight))
+			else:
+				self.l.setElementPosition(self.l.celServiceEventProgressbar, eRect(0, 0, 0, 0))
+			self.l.setElementFont(self.l.celServiceName, self.ServiceNameFont)
+			self.l.setElementPosition(self.l.celServiceName, eRect(0, 0, self.instance.size().width(), self.ItemHeight))
+			self.l.setElementFont(self.l.celEventPercentage, self.EventPercentageFont)
+			self.l.setElementFont(self.l.celServiceInfo, self.ServiceInfoFont)
 		else:
-			self.l.setElementPosition(self.l.celServiceEventProgressbar, eRect(channelNumberWidth+channelNumberSpace, 0, 0, 0))
-		self.l.setElementFont(self.l.celServiceName, self.ServiceNameFont)
-		self.l.setElementFont(self.l.celServiceNumber, self.ServiceNumberFont)
-		self.l.setElementPosition(self.l.celServiceNumber, eRect(0, 0, channelNumberWidth, self.ItemHeight))
-		self.l.setElementPosition(self.l.celServiceName, eRect(channelNumberWidth+channelNumberSpace, 0, self.instance.size().width() - (channelNumberWidth+channelNumberSpace), self.ItemHeight))
-		self.l.setElementFont(self.l.celServiceInfo, self.ServiceInfoFont)
+			if config.usage.show_event_progress_in_servicelist.value:
+				self.l.setElementPosition(self.l.celServiceEventProgressbar, eRect(60, 0, 52, self.ItemHeight))
+			else:
+				self.l.setElementPosition(self.l.celServiceEventProgressbar, eRect(60, 0, 0, 0))
+			self.l.setElementFont(self.l.celServiceNumber, self.ServiceNumberFont)
+			self.l.setElementPosition(self.l.celServiceNumber, eRect(0, 0, 50, self.ItemHeight))
+			self.l.setElementFont(self.l.celServiceName, self.ServiceNameFont)
+			self.l.setElementPosition(self.l.celServiceName, eRect(60, 0, self.instance.size().width()-60, self.ItemHeight))
+                        self.l.setElementFont(self.l.celEventPercentage, self.EventPercentageFont)
+			self.l.setElementFont(self.l.celServiceInfo, self.ServiceInfoFont)
 
diff -Naur 3/lib/python/Components/UsageConfig.py 4/lib/python/Components/UsageConfig.py
--- 3/lib/python/Components/UsageConfig.py	2011-10-16 23:33:41.000000000 +0300
+++ 4/lib/python/Components/UsageConfig.py	2011-10-16 23:33:41.000000000 +0300
@@ -64,7 +64,7 @@
 		("show_menu", _("show shutdown menu")),
 		("shutdown", _("immediate shutdown")),
 		("standby", _("Standby")) ] )
-	
+
 	config.usage.on_short_powerpress = ConfigSelection(default = "standby", choices = [
 		("show_menu", _("show shutdown menu")),
 		("shutdown", _("immediate shutdown")),
@@ -87,6 +87,8 @@
 
 	config.usage.show_event_progress_in_servicelist = ConfigYesNo(default = True)
 	config.usage.show_channel_numbers_in_servicelist = ConfigYesNo(default = True)
+	config.usage.show_percentage_progress_in_servicelist = ConfigYesNo(default = True)
+	config.usage.aligment_event_in_servicelist = ConfigYesNo(default = True)
 
 	config.usage.blinking_display_clock_during_recording = ConfigYesNo(default = False)
 
@@ -122,7 +124,7 @@
 	config.usage.hide_zap_errors = ConfigYesNo(default = False)
 	config.usage.hide_ci_messages = ConfigYesNo(default = False)
 	config.usage.show_cryptoinfo = ConfigYesNo(default = True)
-	config.usage.show_eit_nownext = ConfigYesNo(default = True)
+	config.usage.show_eit_nownext = ConfigYesNo(default = False)
 
 	config.epg = ConfigSubsection()
 	config.epg.eit = ConfigYesNo(default = True)
diff -Naur 3/lib/service/listboxservice.cpp 4/lib/service/listboxservice.cpp
--- 3/lib/service/listboxservice.cpp	2011-10-16 23:33:41.000000000 +0300
+++ 4/lib/service/listboxservice.cpp	2011-10-16 23:33:41.000000000 +0300
@@ -215,6 +215,16 @@
 	return index;
 }
 
+void eListboxServiceContent::setShiftAligment(int offset)
+{
+	m_shift_aligment = offset;
+}
+
+void eListboxServiceContent::setPercentageWidth (int width)
+{
+	m_percentage_width = width;
+}
+
 void eListboxServiceContent::setVisualMode(int mode)
 {
 	for (int i=0; i < celElements; ++i)
@@ -547,9 +557,7 @@
 		eServiceReference ref = *m_cursor;
 		bool isMarker = ref.flags & eServiceReference::isMarker;
 		bool isPlayable = !(ref.flags & eServiceReference::isDirectory || isMarker);
-#define PB_BorderWidth 2
-#define PB_Height 6
-		int paintProgress = 0; /* if non zero draw a progress this size and shorten event string width with it */
+		int paintProgress = 0;
 		ePtr<eServiceEvent> evt;
 
 		bool serviceAvail = true;
@@ -611,6 +619,30 @@
 						service_info->getName(*m_cursor, text);
 					break;
 				}
+				case celEventPercentage:
+				{
+				if ( isPlayable && !service_info->getEvent(*m_cursor, evt) && m_percentage_width!=0)
+				    {
+				        std::string name = evt->getEventName();
+					    if (!name.length())
+					    	continue;
+					    char bla1[4];
+					    int  blai = (difftime(time(NULL),evt->getBeginTime())*100)/evt->getDuration();
+						sprintf(bla1,"%d%%",blai);
+						text = bla1;
+						flags|=gPainter::RT_HALIGN_RIGHT;
+						if (serviceAvail)
+						    {
+							   if (!selected && m_color_set[eventPercentageColor])
+							       painter.setForegroundColor(m_color[eventPercentageColor]);
+							   else if (selected && m_color_set[eventPercentageColorSelected])
+								   painter.setForegroundColor(m_color[eventPercentageColorSelected]);
+							}
+				    }
+			    else
+				    continue;
+			    break;
+			    }
 				case celServiceInfo:
 				{
 					if ( isPlayable && !service_info->getEvent(*m_cursor, evt) )
@@ -628,8 +660,6 @@
 							else
 								painter.setForegroundColor(gRGB(0xe7b53f));
 						}
-						if (paintProgress)
-					    		area.setWidth(area.width() - paintProgress - 2*PB_BorderWidth - 2 ); /* create space for the progress bar */
 					}
 					else
 						continue;
@@ -648,10 +678,18 @@
 				if (e == celServiceName)
 				{
 					eRect bbox = para->getBoundBox();
-					int new_left = area.left() + bbox.width() + 8 + xoffs;
-					m_element_position[celServiceInfo].setLeft(new_left);
+					int name_width = bbox.width()+8;
+					if (name_width < m_shift_aligment)
+					{
+						name_width = m_shift_aligment;
+					}
+					m_element_position[celEventPercentage].setLeft(area.left()+name_width+xoffs);
+					m_element_position[celEventPercentage].setTop(area.top());
+					m_element_position[celEventPercentage].setWidth(m_percentage_width);
+					m_element_position[celEventPercentage].setHeight(area.height());
+					m_element_position[celServiceInfo].setLeft(area.left()+name_width+xoffs+m_percentage_width+6);
 					m_element_position[celServiceInfo].setTop(area.top());
-					m_element_position[celServiceInfo].setWidth(m_itemsize.width() - new_left);
+					m_element_position[celServiceInfo].setWidth(area.width()-(name_width+xoffs+m_percentage_width+6));
 					m_element_position[celServiceInfo].setHeight(area.height());
 				}
 
@@ -725,8 +763,8 @@
 				if (area.width() > 0 && isPlayable)
 				{
 					// we schedule it to paint it as last element.. so we dont need to reset fore/background color
-					paintProgress = area.width();
-					// nopli xoffset = area.width() + 10;
+					paintProgress = isPlayable;
+					xoffset = area.width() + 10;
 				}
 			}
 		}
@@ -734,51 +772,6 @@
 			style.drawFrame(painter, eRect(offset, m_itemsize), eWindowStyle::frameListboxEntry);
 		if (paintProgress && evt)
 		{
-			// show a event progressbar for this service at the right end the screen
-			gRGB ProgressbarBorderColor = 0xdfdfdf;
-			time_t now = time(0);
-			int evt_done = paintProgress * (now - evt->getBeginTime()) / evt->getDuration();
-			int pb_xpos = offset.x() + m_itemsize.width() - paintProgress - 2*PB_BorderWidth;
-			int pb_ypos = offset.y() + (m_itemsize.height() - PB_Height - 2*PB_BorderWidth) / 2;
-
-			// the progress data...
-			eRect tmp = eRect(pb_xpos + PB_BorderWidth,   pb_ypos + PB_BorderWidth,   evt_done,   PB_Height);
-			ePtr<gPixmap> &pixmap = m_pixmaps[picServiceEventProgressbar];
-			if (pixmap) {
-				painter.clip(tmp);
-				painter.blit(pixmap, ePoint(pb_xpos + PB_BorderWidth, pb_ypos + PB_BorderWidth), tmp, gPainter::BT_ALPHATEST);
-				painter.clippop();
-			}
-			else {
-				if (!selected && m_color_set[serviceEventProgressbarColor])
-					painter.setForegroundColor(m_color[serviceEventProgressbarColor]);
-				else if (selected && m_color_set[serviceEventProgressbarColorSelected])
-					painter.setForegroundColor(m_color[serviceEventProgressbarColorSelected]);
-				painter.fill(tmp);
-			}
-
-			// the progressbar border
-			if (!selected)  {
-				if (m_color_set[serviceEventProgressbarBorderColor])
-					ProgressbarBorderColor = m_color[serviceEventProgressbarBorderColor];
-				else if (m_color_set[eventborderForeground])
-					ProgressbarBorderColor = m_color[eventborderForeground];
-			}
-			else { /* !selected */
-				if (m_color_set[serviceEventProgressbarBorderColorSelected])
-					ProgressbarBorderColor = m_color[serviceEventProgressbarBorderColorSelected];
-				else if (m_color_set[eventborderForegroundSelected])
-					ProgressbarBorderColor = m_color[eventborderForegroundSelected];
-			}
-			painter.setForegroundColor(ProgressbarBorderColor);
-
-			painter.fill(eRect(pb_xpos, pb_ypos,                              paintProgress + 2 * PB_BorderWidth,  PB_BorderWidth));
-			painter.fill(eRect(pb_xpos, pb_ypos + PB_BorderWidth + PB_Height, paintProgress + 2 * PB_BorderWidth,  PB_BorderWidth));
-			painter.fill(eRect(pb_xpos, pb_ypos + PB_BorderWidth,             PB_BorderWidth,                      PB_Height));
-			painter.fill(eRect(pb_xpos + PB_BorderWidth + paintProgress, pb_ypos + PB_BorderWidth, PB_BorderWidth, PB_Height));
-		}
-		if (false && paintProgress && evt)  // not in pli
-		{
 			eRect area = m_element_position[celServiceEventProgressbar];
 			if (!selected && m_color_set[serviceEventProgressbarBorderColor])
 				painter.setForegroundColor(m_color[serviceEventProgressbarBorderColor]);
diff -Naur 3/lib/service/listboxservice.h 4/lib/service/listboxservice.h
--- 3/lib/service/listboxservice.h	2011-10-16 23:33:41.000000000 +0300
+++ 4/lib/service/listboxservice.h	2011-10-16 23:33:41.000000000 +0300
@@ -51,6 +51,7 @@
 		celFolderPixmap,
 		celServiceEventProgressbar,
 		celServiceName,
+		celEventPercentage,
 		celServiceTypePixmap,
 		celServiceInfo, // "now" event
 		celElements
@@ -80,6 +81,9 @@
 	int getItemHeight() { return m_itemheight; }
 	void setItemHeight(int height);
 
+	void setShiftAligment(int offset);
+	void setPercentageWidth (int width);
+
 	enum {
 		markedForeground,
 		markedForegroundSelected,
@@ -94,6 +98,8 @@
 		serviceEventProgressbarColorSelected,
 		serviceEventProgressbarBorderColor,
 		serviceEventProgressbarBorderColorSelected,
+		eventPercentageColor,
+		eventPercentageColorSelected,
 		colorElements
 	};
 	
@@ -131,7 +137,7 @@
 	list::iterator m_cursor, m_saved_cursor;
 	
 	int m_cursor_number, m_saved_cursor_number;
-	int m_size;
+	int m_size,m_percentage_width,m_shift_aligment;
 	
 	eSize m_itemsize;
 	ePtr<iServiceHandler> m_service_center;
